{
  "stats": {
    "suites": 13,
    "tests": 32,
    "passes": 32,
    "pending": 0,
    "failures": 0,
    "start": "2019-03-21T13:26:37.733Z",
    "end": "2019-03-21T13:26:37.754Z",
    "duration": 21,
    "testsRegistered": 32,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "0e70c423-10c9-4718-8bab-2d50db6b1946",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "565e3b14-642c-4093-ad46-9acc39fbb995",
        "title": "Album",
        "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/album.spec.js",
        "file": "/tests/album.spec.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Album \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "ids = ['28sCbClwbAhHN6ovutizQg', '42QVkdlfEk9uaG0NboeKpq'];\nspotify = new _index2.default({\n  token: 'foo'\n});\nstubedFetch = _sinon2.default.stub(global, 'fetch');\nstubedFetch.resolves({ json: function json() {\n    return { album: 'name' };\n  } });",
            "err": {},
            "isRoot": false,
            "uuid": "9b531b7f-8472-4632-836b-37bbdafcb663",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "Album \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "stubedFetch.restore();",
            "err": {},
            "isRoot": false,
            "uuid": "eb501808-4f55-4c55-a73a-a420735e7d62",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "7feb057f-2118-4164-94db-77243746e03a",
            "title": "Smoke tests",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/album.spec.js",
            "file": "/tests/album.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should have getAlbum method",
                "fullTitle": "Album Smoke tests should have getAlbum method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return (0, _chai.expect)(spotify.album.getAlbum).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "0468da52-ad55-4d26-a565-25ec15700ab4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have getAlbums method",
                "fullTitle": "Album Smoke tests should have getAlbums method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return (0, _chai.expect)(spotify.album.getAlbums).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "1dee0686-c5ca-4208-877d-8729412c718e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have getTracks method",
                "fullTitle": "Album Smoke tests should have getTracks method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return (0, _chai.expect)(spotify.album.getTracks).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "83fe8752-7bb2-41df-a82e-110d617c6d31",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0468da52-ad55-4d26-a565-25ec15700ab4",
              "1dee0686-c5ca-4208-877d-8729412c718e",
              "83fe8752-7bb2-41df-a82e-110d617c6d31"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "746d77b5-b11c-4b0b-bb05-f1aeff0c23ad",
            "title": "Testing getAlbum method",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/album.spec.js",
            "file": "/tests/album.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should call fetch method",
                "fullTitle": "Album Testing getAlbum method should call fetch method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "spotify.album.getAlbum();\nreturn (0, _chai.expect)(stubedFetch).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "5bc56179-95ba-4e2b-ade6-ba839f944184",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call fetch with the correct URL",
                "fullTitle": "Album Testing getAlbum method should call fetch with the correct URL",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var albumURL = _config2.default + '/album/';\nids.forEach(function (id) {\n  spotify.album.getAlbum(id);\n  (0, _chai.expect)(stubedFetch).to.have.been.calledWith('' + albumURL + id);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e4c77011-8213-425d-a159-ffaa08158403",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the correct data from Promise",
                "fullTitle": "Album Testing getAlbum method should return the correct data from Promise",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "ids.forEach(function (id) {\n  var album = spotify.album.getAlbum(id);\n  album.then(function (data) {\n    (0, _chai.expect)(data).to.be.eql({ album: 'name' });\n  });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f8f2304e-3f13-4b54-ab40-4023d67a6d1e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5bc56179-95ba-4e2b-ade6-ba839f944184",
              "e4c77011-8213-425d-a159-ffaa08158403",
              "f8f2304e-3f13-4b54-ab40-4023d67a6d1e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "6b492ea2-0bb8-49ef-9ed8-9d3f5ffa2ecb",
            "title": "Testing getAlbums method",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/album.spec.js",
            "file": "/tests/album.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should call fetch method",
                "fullTitle": "Album Testing getAlbums method should call fetch method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "spotify.album.getAlbums();\nreturn (0, _chai.expect)(stubedFetch).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "a4b16ed5-c6d2-443a-9277-c19546851e4f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call fetch with the correct URL's",
                "fullTitle": "Album Testing getAlbums method should call fetch with the correct URL's",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var albumsURL = _config2.default + '/albums/?ids=';\nspotify.album.getAlbums(ids);\n(0, _chai.expect)(stubedFetch).to.have.been.calledWith('' + albumsURL + ids);",
                "err": {},
                "isRoot": false,
                "uuid": "a85826ef-7499-41a4-9c32-b36805f65122",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the correct data from Promise",
                "fullTitle": "Album Testing getAlbums method should return the correct data from Promise",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var albums = spotify.album.getAlbums(ids);\nalbums.then(function (data) {\n  (0, _chai.expect)(data).to.be.eql({ album: 'name' });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "956e80f9-0a74-414b-a710-ff8335fb7865",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a4b16ed5-c6d2-443a-9277-c19546851e4f",
              "a85826ef-7499-41a4-9c32-b36805f65122",
              "956e80f9-0a74-414b-a710-ff8335fb7865"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "9e4d5587-129a-4ce2-80a8-ede891079324",
            "title": "Testing getTracks method",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/album.spec.js",
            "file": "/tests/album.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should call fetch method",
                "fullTitle": "Album Testing getTracks method should call fetch method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "spotify.album.getTracks();\nreturn (0, _chai.expect)(stubedFetch).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "c5a226e3-9bc9-4a92-8227-0c5d9ab472d9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call fetch with the correct URL",
                "fullTitle": "Album Testing getTracks method should call fetch with the correct URL",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var tracksURL = _config2.default + '/tracks/';\nids.forEach(function (id) {\n  spotify.album.getTracks(id);\n  (0, _chai.expect)(stubedFetch).to.have.been.calledWith('' + tracksURL + id);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0e441bb3-ccfb-4c88-ad65-067b30794c4b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the correct data from Promise",
                "fullTitle": "Album Testing getTracks method should return the correct data from Promise",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "ids.forEach(function (id) {\n  var tracks = spotify.album.getTracks(id);\n  tracks.then(function (data) {\n    (0, _chai.expect)(data).to.be.eql({ album: 'name' });\n  });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "6278d90c-70f0-4256-82b5-614b454a7451",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c5a226e3-9bc9-4a92-8227-0c5d9ab472d9",
              "0e441bb3-ccfb-4c88-ad65-067b30794c4b",
              "6278d90c-70f0-4256-82b5-614b454a7451"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "acd9e54a-cad6-451b-aaa5-4af260078107",
        "title": "SpotifyWrapper",
        "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/index.spec.js",
        "file": "/tests/index.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should create an instance of SpotifyWrapper",
            "fullTitle": "SpotifyWrapper should create an instance of SpotifyWrapper",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spotify = new _index2.default({});\n(0, _chai.expect)(spotify).to.be.an.instanceof(_index2.default);",
            "err": {},
            "isRoot": false,
            "uuid": "6ee39b11-a236-45ab-99b1-7ca122814ad0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should receive apiURL as an option",
            "fullTitle": "SpotifyWrapper should receive apiURL as an option",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spotify = new _index2.default({\n  apiURL: 'blabla'\n});\n(0, _chai.expect)(spotify.apiURL).to.be.equal('blabla');",
            "err": {},
            "isRoot": false,
            "uuid": "5050ca2f-5296-4b35-ae8a-85714f13464f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should use the default apiURL if not provided",
            "fullTitle": "SpotifyWrapper should use the default apiURL if not provided",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spotify = new _index2.default({});\n(0, _chai.expect)(spotify.apiURL).to.be.equal('https://api.spotify.com/v1');",
            "err": {},
            "isRoot": false,
            "uuid": "71799218-8e7b-4216-b27c-f7a9931fe844",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should receive token as an option",
            "fullTitle": "SpotifyWrapper should receive token as an option",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spotify = new _index2.default({\n  token: 'foo'\n});\n(0, _chai.expect)(spotify.token).to.be.equal('foo');",
            "err": {},
            "isRoot": false,
            "uuid": "3232408a-0b80-4de3-bb38-265372859458",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [
          {
            "uuid": "34b5074f-4a96-42b0-9828-9b6e7d5ea308",
            "title": "Verify request method",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/index.spec.js",
            "file": "/tests/index.spec.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "SpotifyWrapper Verify request method \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "stubedFetch = _sinon2.default.stub(global, 'fetch');\nstubedFetch.resolves({ json: function json() {\n    return { album: 'name' };\n  } });",
                "err": {},
                "isRoot": false,
                "uuid": "09af5a16-bfc6-412d-b461-3e51ce2fd815",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "SpotifyWrapper Verify request method \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "stubedFetch.restore();",
                "err": {},
                "isRoot": false,
                "uuid": "6d142b31-fb71-4bd8-a8ea-9fba3d7a04c9",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "should have request method",
                "fullTitle": "SpotifyWrapper Verify request method should have request method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spotify = new _index2.default({});\nreturn (0, _chai.expect)(spotify.request).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "8a13973d-f85d-41e5-8d18-6360400e2007",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call fetch when request",
                "fullTitle": "SpotifyWrapper Verify request method should call fetch when request",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spotify = new _index2.default({\n  token: 'foo'\n});\nspotify.request('url');\nreturn (0, _chai.expect)(stubedFetch).to.be.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "1d97f7c0-0d46-4aba-8cb0-c827c6741f57",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call fetch with right url passed",
                "fullTitle": "SpotifyWrapper Verify request method should call fetch with right url passed",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spotify = new _index2.default({\n  token: 'foo'\n});\nspotify.request('url');\nreturn (0, _chai.expect)(stubedFetch).to.be.calledWith('url');",
                "err": {},
                "isRoot": false,
                "uuid": "1fb3ff47-9a15-43e7-b6d4-38b00f986b78",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call fetch with right headers passed",
                "fullTitle": "SpotifyWrapper Verify request method should call fetch with right headers passed",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var spotify = new _index2.default({\n  token: 'foo'\n});\nvar headers = {\n  headers: {\n    Authorization: 'Bearer ' + spotify.token\n  }\n};\nspotify.request('url', headers);\nreturn (0, _chai.expect)(stubedFetch).to.be.calledWith('url', headers);",
                "err": {},
                "isRoot": false,
                "uuid": "28d7508b-9665-4919-bdd1-cd30eab9268f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8a13973d-f85d-41e5-8d18-6360400e2007",
              "1d97f7c0-0d46-4aba-8cb0-c827c6741f57",
              "1fb3ff47-9a15-43e7-b6d4-38b00f986b78",
              "28d7508b-9665-4919-bdd1-cd30eab9268f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [
          "6ee39b11-a236-45ab-99b1-7ca122814ad0",
          "5050ca2f-5296-4b35-ae8a-85714f13464f",
          "71799218-8e7b-4216-b27c-f7a9931fe844",
          "3232408a-0b80-4de3-bb38-265372859458"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "09b9d459-c1f1-439b-b3c2-0e007f44d4dc",
        "title": "Search",
        "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/search.spec.js",
        "file": "/tests/search.spec.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Search \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "names = ['Deftones', 'Queen'];\nspotify = new _index2.default({\n  token: 'foo'\n});\nfetchedStub = _sinon2.default.stub(global, 'fetch');\nfetchedStub.resolves({ json: function json() {} });",
            "err": {},
            "isRoot": false,
            "uuid": "b58c370e-443b-4d02-b2a6-8e04e84f1c41",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "Search \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "fetchedStub.restore();",
            "err": {},
            "isRoot": false,
            "uuid": "1cdd0e7e-dabb-4c6d-aef8-20036df54de0",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "8f254818-30e7-4e21-a36f-747d6a7e1046",
            "title": "smoke tests",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/search.spec.js",
            "file": "/tests/search.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should exist the spotify.search.albums method",
                "fullTitle": "Search smoke tests should exist the spotify.search.albums method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return (0, _chai.expect)(spotify.search.albums).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "9ca8d9a7-30e7-4739-97be-46d7bd118e79",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should exist the spotify.search.artists method",
                "fullTitle": "Search smoke tests should exist the spotify.search.artists method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return (0, _chai.expect)(spotify.search.artists).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "26a735bf-bb3c-4f69-b1c4-4a867710c234",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should exist the spotify.search.playlists method",
                "fullTitle": "Search smoke tests should exist the spotify.search.playlists method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return (0, _chai.expect)(spotify.search.playlists).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "ae9455c8-91be-4f4e-9d37-1f9cc827afb9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should exist the spotify.search.tracks method",
                "fullTitle": "Search smoke tests should exist the spotify.search.tracks method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return (0, _chai.expect)(spotify.search.tracks).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "ed6c3594-ff78-4638-8bbd-8b1ec3f4cb2a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9ca8d9a7-30e7-4739-97be-46d7bd118e79",
              "26a735bf-bb3c-4f69-b1c4-4a867710c234",
              "ae9455c8-91be-4f4e-9d37-1f9cc827afb9",
              "ed6c3594-ff78-4638-8bbd-8b1ec3f4cb2a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "32622be8-8ee0-420c-bb1b-0f2233d25d30",
            "title": "Testing spotify.search.albums",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/search.spec.js",
            "file": "/tests/search.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should call fetch function",
                "fullTitle": "Search Testing spotify.search.albums should call fetch function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "spotify.search.albums();\nreturn (0, _chai.expect)(fetchedStub).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "c3c02d1a-c4a3-4b2a-b73d-20d94bf5591d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call fetch with the correct URL",
                "fullTitle": "Search Testing spotify.search.albums should call fetch with the correct URL",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var albumURL = void 0;\nnames.forEach(function (name) {\n  albumURL = _config2.default + '/search?q=' + name + '&type=album';\n  spotify.search.albums(name);\n  (0, _chai.expect)(fetchedStub).to.have.been.calledWith(albumURL);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a1b208a8-0aa9-428a-b326-176b66d7121d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c3c02d1a-c4a3-4b2a-b73d-20d94bf5591d",
              "a1b208a8-0aa9-428a-b326-176b66d7121d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "bbf9166d-5a9f-41ef-80cc-2f9ec84bee42",
            "title": "Testing spotify.search.artists",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/search.spec.js",
            "file": "/tests/search.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should call fetch function",
                "fullTitle": "Search Testing spotify.search.artists should call fetch function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "spotify.search.artists();\nreturn (0, _chai.expect)(fetchedStub).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "df28475e-92f0-4dc4-999f-a351d54cc779",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call fetch with the correct URL",
                "fullTitle": "Search Testing spotify.search.artists should call fetch with the correct URL",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var artistURL = void 0;\nnames.forEach(function (name) {\n  artistURL = _config2.default + '/search?q=' + name + '&type=artist';\n  spotify.search.artists(name);\n  (0, _chai.expect)(fetchedStub).to.have.been.calledWith(artistURL);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a5591c7f-117b-4b3e-9d05-07989579a8de",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "df28475e-92f0-4dc4-999f-a351d54cc779",
              "a5591c7f-117b-4b3e-9d05-07989579a8de"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "0a3b82d8-9119-42cf-9f47-c1280600e3a8",
            "title": "Testing spotify.search.playlists",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/search.spec.js",
            "file": "/tests/search.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should call fetch function",
                "fullTitle": "Search Testing spotify.search.playlists should call fetch function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "spotify.search.playlists();\nreturn (0, _chai.expect)(fetchedStub).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "0e20c97c-0f0b-4561-ae5a-fc6ee296ee29",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call fetch with the correct URL",
                "fullTitle": "Search Testing spotify.search.playlists should call fetch with the correct URL",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var playlistURL = void 0;\nnames.forEach(function (name) {\n  playlistURL = _config2.default + '/search?q=' + name + '&type=playlist';\n  spotify.search.playlists(name);\n  (0, _chai.expect)(fetchedStub).to.have.been.calledWith(playlistURL);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "30d8d7a7-d85e-4d6d-ba01-dc3c531444a2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0e20c97c-0f0b-4561-ae5a-fc6ee296ee29",
              "30d8d7a7-d85e-4d6d-ba01-dc3c531444a2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "1d722124-ed64-4e99-bf32-63cb26de1f9c",
            "title": "Testing spotify.search.tracks",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/search.spec.js",
            "file": "/tests/search.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should call fetch function",
                "fullTitle": "Search Testing spotify.search.tracks should call fetch function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "spotify.search.tracks();\nreturn (0, _chai.expect)(fetchedStub).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "3d820357-940c-48e4-8595-d304e8aca654",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call fetch with the correct URL",
                "fullTitle": "Search Testing spotify.search.tracks should call fetch with the correct URL",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var trackURL = void 0;\nnames.forEach(function (name) {\n  trackURL = _config2.default + '/search?q=' + name + '&type=track';\n  spotify.search.tracks(name);\n  (0, _chai.expect)(fetchedStub).to.have.been.calledWith(trackURL);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "87c86485-8a1a-4123-8c3f-235f1444b6f1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3d820357-940c-48e4-8595-d304e8aca654",
              "87c86485-8a1a-4123-8c3f-235f1444b6f1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}