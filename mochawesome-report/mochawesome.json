{
  "stats": {
    "suites": 12,
    "tests": 28,
    "passes": 28,
    "pending": 0,
    "failures": 0,
    "start": "2019-03-20T14:42:20.918Z",
    "end": "2019-03-20T14:42:20.951Z",
    "duration": 33,
    "testsRegistered": 28,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "e1458dca-f843-4fa5-87b4-89d63b6a4499",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "b5ccb6bc-28d1-4fff-9c96-df192ab909d2",
        "title": "Album",
        "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/album.spec.js",
        "file": "/tests/album.spec.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Album \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "ids = ['28sCbClwbAhHN6ovutizQg', '42QVkdlfEk9uaG0NboeKpq'];\nspotify = new _index2.default({\n  token: 'foo'\n});\nstubedFetch = _sinon2.default.stub(global, 'fetch');\nstubedFetch.resolves({ json: function json() {\n    return { album: 'name' };\n  } });",
            "err": {},
            "isRoot": false,
            "uuid": "cbcab865-9eb9-410d-9239-38e30ce9aaf0",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "Album \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "stubedFetch.restore();",
            "err": {},
            "isRoot": false,
            "uuid": "7d5e5fee-7f79-4bbc-940d-f2de0231e2d2",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "38071867-e91f-467b-935c-513dba85de49",
            "title": "Smoke tests",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/album.spec.js",
            "file": "/tests/album.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should have getAlbum method",
                "fullTitle": "Album Smoke tests should have getAlbum method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return (0, _chai.expect)(spotify.album.getAlbum).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "a8c5c359-cb72-4d4e-a0cb-c9129ce4fa9d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have getAlbums method",
                "fullTitle": "Album Smoke tests should have getAlbums method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return (0, _chai.expect)(spotify.album.getAlbums).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "0070f6e9-6df1-4764-8986-e928e419963a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have getTracks method",
                "fullTitle": "Album Smoke tests should have getTracks method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return (0, _chai.expect)(spotify.album.getTracks).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "3943c0ef-0af5-44c9-9202-bf320ae6f4f5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a8c5c359-cb72-4d4e-a0cb-c9129ce4fa9d",
              "0070f6e9-6df1-4764-8986-e928e419963a",
              "3943c0ef-0af5-44c9-9202-bf320ae6f4f5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "98da83e0-79cb-4910-8687-c150ac4124b1",
            "title": "Testing getAlbum method",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/album.spec.js",
            "file": "/tests/album.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should call fetch method",
                "fullTitle": "Album Testing getAlbum method should call fetch method",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "spotify.album.getAlbum();\nreturn (0, _chai.expect)(stubedFetch).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "fd806620-a402-4794-879f-ae83089ccd3c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call fetch with the correct URL",
                "fullTitle": "Album Testing getAlbum method should call fetch with the correct URL",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var albumURL = _config2.default + '/album/';\nids.forEach(function (id) {\n  spotify.album.getAlbum(id);\n  (0, _chai.expect)(stubedFetch).to.have.been.calledWith('' + albumURL + id);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e0e3232e-9441-4422-8a15-1176be4ec1a6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the correct data from Promise",
                "fullTitle": "Album Testing getAlbum method should return the correct data from Promise",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "ids.forEach(function (id) {\n  var album = spotify.album.getAlbum(id);\n  album.then(function (data) {\n    (0, _chai.expect)(data).to.be.eql({ album: 'name' });\n  });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1f5ed761-fd10-43a6-89da-0d3d78ecd6f2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fd806620-a402-4794-879f-ae83089ccd3c",
              "e0e3232e-9441-4422-8a15-1176be4ec1a6",
              "1f5ed761-fd10-43a6-89da-0d3d78ecd6f2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "78d4eb3d-f830-4852-ac7c-4ca27d6a52d8",
            "title": "Testing getAlbums method",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/album.spec.js",
            "file": "/tests/album.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should call fetch method",
                "fullTitle": "Album Testing getAlbums method should call fetch method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "spotify.album.getAlbums();\nreturn (0, _chai.expect)(stubedFetch).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "aabbe975-3d6d-4dbd-ad80-b23a624cc8cf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call fetch with the correct URL's",
                "fullTitle": "Album Testing getAlbums method should call fetch with the correct URL's",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var albumsURL = _config2.default + '/albums/?ids=';\nspotify.album.getAlbums(ids);\n(0, _chai.expect)(stubedFetch).to.have.been.calledWith('' + albumsURL + ids);",
                "err": {},
                "isRoot": false,
                "uuid": "118f4201-f80c-4276-b0bd-18704f42fb50",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the correct data from Promise",
                "fullTitle": "Album Testing getAlbums method should return the correct data from Promise",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var albums = spotify.album.getAlbums(ids);\nalbums.then(function (data) {\n  (0, _chai.expect)(data).to.be.eql({ album: 'name' });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0a3d0095-c982-4c95-9c37-fc4ae93cb79d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "aabbe975-3d6d-4dbd-ad80-b23a624cc8cf",
              "118f4201-f80c-4276-b0bd-18704f42fb50",
              "0a3d0095-c982-4c95-9c37-fc4ae93cb79d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "08e63c67-3349-4f75-886f-83fd2427eebf",
            "title": "Testing getTracks method",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/album.spec.js",
            "file": "/tests/album.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should call fetch method",
                "fullTitle": "Album Testing getTracks method should call fetch method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "spotify.album.getTracks();\nreturn (0, _chai.expect)(stubedFetch).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "ba652746-9122-4682-b189-a86eb7c7bb0b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call fetch with the correct URL",
                "fullTitle": "Album Testing getTracks method should call fetch with the correct URL",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var tracksURL = _config2.default + '/tracks/';\nids.forEach(function (id) {\n  spotify.album.getTracks(id);\n  (0, _chai.expect)(stubedFetch).to.have.been.calledWith('' + tracksURL + id);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c74f8cfc-0051-421e-8610-c1b3b0c6bd46",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the correct data from Promise",
                "fullTitle": "Album Testing getTracks method should return the correct data from Promise",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "ids.forEach(function (id) {\n  var tracks = spotify.album.getTracks(id);\n  tracks.then(function (data) {\n    (0, _chai.expect)(data).to.be.eql({ album: 'name' });\n  });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "2091b077-54f0-4895-bda9-f1eb6accb18e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ba652746-9122-4682-b189-a86eb7c7bb0b",
              "c74f8cfc-0051-421e-8610-c1b3b0c6bd46",
              "2091b077-54f0-4895-bda9-f1eb6accb18e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a678f9b9-1298-4aec-84ab-86c3225c1196",
        "title": "SpotifyWrapper",
        "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/index.spec.js",
        "file": "/tests/index.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should create an instance of SpotifyWrapper",
            "fullTitle": "SpotifyWrapper should create an instance of SpotifyWrapper",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spotify = new _index2.default({});\n(0, _chai.expect)(spotify).to.be.an.instanceof(_index2.default);",
            "err": {},
            "isRoot": false,
            "uuid": "357980d9-f58c-4ea0-bc19-454d2399c53d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should receive apiURL as an option",
            "fullTitle": "SpotifyWrapper should receive apiURL as an option",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spotify = new _index2.default({\n  apiURL: 'blabla'\n});\n(0, _chai.expect)(spotify.apiURL).to.be.equal('blabla');",
            "err": {},
            "isRoot": false,
            "uuid": "83d20507-6cf2-44ca-a379-7af6b81ff447",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should use the default apiURL if not provided",
            "fullTitle": "SpotifyWrapper should use the default apiURL if not provided",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spotify = new _index2.default({});\n(0, _chai.expect)(spotify.apiURL).to.be.equal('https://api.spotify.com/v1');",
            "err": {},
            "isRoot": false,
            "uuid": "573fd72a-676a-4f9c-b6e3-4fb7f797a533",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should receive token as an option",
            "fullTitle": "SpotifyWrapper should receive token as an option",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spotify = new _index2.default({\n  token: 'foo'\n});\n(0, _chai.expect)(spotify.token).to.be.equal('foo');",
            "err": {},
            "isRoot": false,
            "uuid": "7f026781-2fd2-493d-8099-2e69d6f4a5bb",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "357980d9-f58c-4ea0-bc19-454d2399c53d",
          "83d20507-6cf2-44ca-a379-7af6b81ff447",
          "573fd72a-676a-4f9c-b6e3-4fb7f797a533",
          "7f026781-2fd2-493d-8099-2e69d6f4a5bb"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "da3887fb-066a-4f35-a315-e45e7ed8d403",
        "title": "Search",
        "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/search.spec.js",
        "file": "/tests/search.spec.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Search \"before each\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "names = ['Deftones', 'Queen'];\nspotify = new _index2.default({\n  token: 'foo'\n});\nfetchedStub = _sinon2.default.stub(global, 'fetch');\nfetchedStub.resolves({ json: function json() {} });",
            "err": {},
            "isRoot": false,
            "uuid": "995840d4-50fc-46f8-af78-e1d1483f9cae",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "Search \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "fetchedStub.restore();",
            "err": {},
            "isRoot": false,
            "uuid": "3e817b0d-1740-45c9-a92d-8a8a73e6837d",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "49d97fbc-d30d-4d8b-9e96-fda595601c67",
            "title": "smoke tests",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/search.spec.js",
            "file": "/tests/search.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should exist the spotify.search.albums method",
                "fullTitle": "Search smoke tests should exist the spotify.search.albums method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return (0, _chai.expect)(spotify.search.albums).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "e85af46f-ed02-4d88-ba92-a9a32684ad51",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should exist the spotify.search.artists method",
                "fullTitle": "Search smoke tests should exist the spotify.search.artists method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return (0, _chai.expect)(spotify.search.artists).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "50b91217-9623-4334-a91d-45aae676f0fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should exist the spotify.search.playlists method",
                "fullTitle": "Search smoke tests should exist the spotify.search.playlists method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return (0, _chai.expect)(spotify.search.playlists).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "0022fd27-ef61-4b3f-8baa-99de75c98e82",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should exist the spotify.search.tracks method",
                "fullTitle": "Search smoke tests should exist the spotify.search.tracks method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return (0, _chai.expect)(spotify.search.tracks).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "0a1a118d-f894-4ee2-901c-34ce919031bf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e85af46f-ed02-4d88-ba92-a9a32684ad51",
              "50b91217-9623-4334-a91d-45aae676f0fe",
              "0022fd27-ef61-4b3f-8baa-99de75c98e82",
              "0a1a118d-f894-4ee2-901c-34ce919031bf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "9700f66d-e494-46d2-a2b6-045b184a154e",
            "title": "Testing spotify.search.albums",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/search.spec.js",
            "file": "/tests/search.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should call fetch function",
                "fullTitle": "Search Testing spotify.search.albums should call fetch function",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "spotify.search.albums();\nreturn (0, _chai.expect)(fetchedStub).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "ce61e151-37d5-4924-8202-ea315bd7bd44",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call fetch with the correct URL",
                "fullTitle": "Search Testing spotify.search.albums should call fetch with the correct URL",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var albumURL = void 0;\nnames.forEach(function (name) {\n  albumURL = _config2.default + '/search?q=' + name + '&type=album';\n  spotify.search.albums(name);\n  (0, _chai.expect)(fetchedStub).to.have.been.calledWith(albumURL);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "2025e692-315d-4d06-b545-c007fb157874",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ce61e151-37d5-4924-8202-ea315bd7bd44",
              "2025e692-315d-4d06-b545-c007fb157874"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "7de6a7ae-6387-4347-a57a-7c3acdfe5e13",
            "title": "Testing spotify.search.artists",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/search.spec.js",
            "file": "/tests/search.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should call fetch function",
                "fullTitle": "Search Testing spotify.search.artists should call fetch function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "spotify.search.artists();\nreturn (0, _chai.expect)(fetchedStub).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "c1a3ee95-4c69-4dee-a4e4-4f44b98015c8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call fetch with the correct URL",
                "fullTitle": "Search Testing spotify.search.artists should call fetch with the correct URL",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var artistURL = void 0;\nnames.forEach(function (name) {\n  artistURL = _config2.default + '/search?q=' + name + '&type=artist';\n  spotify.search.artists(name);\n  (0, _chai.expect)(fetchedStub).to.have.been.calledWith(artistURL);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "55057636-a070-4e73-b482-2e202b2c6950",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c1a3ee95-4c69-4dee-a4e4-4f44b98015c8",
              "55057636-a070-4e73-b482-2e202b2c6950"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "97cd1f5c-b65e-4ed8-87e9-47ffa3e28389",
            "title": "Testing spotify.search.playlists",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/search.spec.js",
            "file": "/tests/search.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should call fetch function",
                "fullTitle": "Search Testing spotify.search.playlists should call fetch function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "spotify.search.playlists();\nreturn (0, _chai.expect)(fetchedStub).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "791d7a13-24b9-41ec-a7d5-53c5e9621c16",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call fetch with the correct URL",
                "fullTitle": "Search Testing spotify.search.playlists should call fetch with the correct URL",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var playlistURL = void 0;\nnames.forEach(function (name) {\n  playlistURL = _config2.default + '/search?q=' + name + '&type=playlist';\n  spotify.search.playlists(name);\n  (0, _chai.expect)(fetchedStub).to.have.been.calledWith(playlistURL);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1a964c70-1bad-41d2-8375-4c7db525e3b8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "791d7a13-24b9-41ec-a7d5-53c5e9621c16",
              "1a964c70-1bad-41d2-8375-4c7db525e3b8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "f3cf1ab5-a834-438e-ac3a-b39bf8674247",
            "title": "Testing spotify.search.tracks",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/search.spec.js",
            "file": "/tests/search.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should call fetch function",
                "fullTitle": "Search Testing spotify.search.tracks should call fetch function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "spotify.search.tracks();\nreturn (0, _chai.expect)(fetchedStub).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "221e6091-0da5-4bfa-b80a-2d388313d05e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call fetch with the correct URL",
                "fullTitle": "Search Testing spotify.search.tracks should call fetch with the correct URL",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var trackURL = void 0;\nnames.forEach(function (name) {\n  trackURL = _config2.default + '/search?q=' + name + '&type=track';\n  spotify.search.tracks(name);\n  (0, _chai.expect)(fetchedStub).to.have.been.calledWith(trackURL);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "5c544db9-deea-4dc2-bd11-18b5f7afe79e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "221e6091-0da5-4bfa-b80a-2d388313d05e",
              "5c544db9-deea-4dc2-bd11-18b5f7afe79e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}