{
  "stats": {
    "suites": 12,
    "tests": 28,
    "passes": 28,
    "pending": 0,
    "failures": 0,
    "start": "2019-03-15T13:21:57.853Z",
    "end": "2019-03-15T13:21:57.909Z",
    "duration": 56,
    "testsRegistered": 28,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "28746625-ab66-410a-8742-2acd3c11a2b3",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "44011f22-7caa-461d-9a72-d471a2c2d4e2",
        "title": "Album",
        "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/album.spec.js",
        "file": "/tests/album.spec.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Album \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "ids = ['28sCbClwbAhHN6ovutizQg', '42QVkdlfEk9uaG0NboeKpq'];\nspotify = new _index2.default({\n  token: 'foo'\n});\nstubedFetch = _sinon2.default.stub(global, 'fetch');\nstubedFetch.resolves({ json: function json() {\n    return { album: 'name' };\n  } });",
            "err": {},
            "isRoot": false,
            "uuid": "0608e94e-bc70-48a5-a7ef-7d8e5761e356",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "Album \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "stubedFetch.restore();",
            "err": {},
            "isRoot": false,
            "uuid": "304792a9-eef3-43bb-9e69-bb998365e03f",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "3d36c4d4-5256-429d-b97b-df563e34265e",
            "title": "Smoke tests",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/album.spec.js",
            "file": "/tests/album.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should have getAlbum method",
                "fullTitle": "Album Smoke tests should have getAlbum method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return (0, _chai.expect)(spotify.album.getAlbum).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "2c02df42-bc1d-4bde-9439-804c0e3e21ba",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have getAlbums method",
                "fullTitle": "Album Smoke tests should have getAlbums method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return (0, _chai.expect)(spotify.album.getAlbums).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "0df3ec5d-e8c2-4aa8-969c-815687f9d30b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have getTracks method",
                "fullTitle": "Album Smoke tests should have getTracks method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return (0, _chai.expect)(spotify.album.getTracks).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "967fdee3-d874-4627-89d2-986a91a9f891",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2c02df42-bc1d-4bde-9439-804c0e3e21ba",
              "0df3ec5d-e8c2-4aa8-969c-815687f9d30b",
              "967fdee3-d874-4627-89d2-986a91a9f891"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "98b1a34f-6d80-42d1-936a-296516a51a45",
            "title": "Testing getAlbum method",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/album.spec.js",
            "file": "/tests/album.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should call fetch method",
                "fullTitle": "Album Testing getAlbum method should call fetch method",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "spotify.album.getAlbum();\nreturn (0, _chai.expect)(stubedFetch).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "c8699516-528b-4f75-87d6-46d82affa431",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call fetch with the correct URL",
                "fullTitle": "Album Testing getAlbum method should call fetch with the correct URL",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var albumURL = _config2.default + '/album/';\nids.forEach(function (id) {\n  spotify.album.getAlbum(id);\n  (0, _chai.expect)(stubedFetch).to.have.been.calledWith('' + albumURL + id);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "693b139f-cd2e-46e8-8055-c6c24ea80e75",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the correct data from Promise",
                "fullTitle": "Album Testing getAlbum method should return the correct data from Promise",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "ids.forEach(function (id) {\n  var album = spotify.album.getAlbum(id);\n  album.then(function (data) {\n    (0, _chai.expect)(data).to.be.eql({ album: 'name' });\n  });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e88393c9-baa9-4a81-8f2a-2815dc4bbfe2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c8699516-528b-4f75-87d6-46d82affa431",
              "693b139f-cd2e-46e8-8055-c6c24ea80e75",
              "e88393c9-baa9-4a81-8f2a-2815dc4bbfe2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "6423916a-c0ae-4d6b-8d47-d8b02893b2d6",
            "title": "Testing getAlbums method",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/album.spec.js",
            "file": "/tests/album.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should call fetch method",
                "fullTitle": "Album Testing getAlbums method should call fetch method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "spotify.album.getAlbums();\nreturn (0, _chai.expect)(stubedFetch).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "c5ab4b9a-1a8e-4658-9bcd-a4a170ff9af9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call fetch with the correct URL's",
                "fullTitle": "Album Testing getAlbums method should call fetch with the correct URL's",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var albumsURL = _config2.default + '/albums/?ids=';\nspotify.album.getAlbums(ids);\n(0, _chai.expect)(stubedFetch).to.have.been.calledWith('' + albumsURL + ids);",
                "err": {},
                "isRoot": false,
                "uuid": "c06d3e15-6755-46f0-b282-fc2650b31b9a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the correct data from Promise",
                "fullTitle": "Album Testing getAlbums method should return the correct data from Promise",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var albums = spotify.album.getAlbums(ids);\nalbums.then(function (data) {\n  (0, _chai.expect)(data).to.be.eql({ album: 'name' });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f31554b4-5cb1-4962-851d-294a5f750032",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c5ab4b9a-1a8e-4658-9bcd-a4a170ff9af9",
              "c06d3e15-6755-46f0-b282-fc2650b31b9a",
              "f31554b4-5cb1-4962-851d-294a5f750032"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "9e20daa0-ddad-4f5e-85ae-958cf52a9011",
            "title": "Testing getTracks method",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/album.spec.js",
            "file": "/tests/album.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should call fetch method",
                "fullTitle": "Album Testing getTracks method should call fetch method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "spotify.album.getTracks();\nreturn (0, _chai.expect)(stubedFetch).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "6e2e66dc-a1c6-4d62-98ab-b29961296b2e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call fetch with the correct URL",
                "fullTitle": "Album Testing getTracks method should call fetch with the correct URL",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var tracksURL = _config2.default + '/tracks/';\nids.forEach(function (id) {\n  spotify.album.getTracks(id);\n  (0, _chai.expect)(stubedFetch).to.have.been.calledWith('' + tracksURL + id);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8dc10504-a7e5-42a7-84f1-d85170971165",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the correct data from Promise",
                "fullTitle": "Album Testing getTracks method should return the correct data from Promise",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "ids.forEach(function (id) {\n  var tracks = spotify.album.getTracks(id);\n  tracks.then(function (data) {\n    (0, _chai.expect)(data).to.be.eql({ album: 'name' });\n  });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "dcf8f10b-c79e-424a-a2c8-da5feb8524b9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6e2e66dc-a1c6-4d62-98ab-b29961296b2e",
              "8dc10504-a7e5-42a7-84f1-d85170971165",
              "dcf8f10b-c79e-424a-a2c8-da5feb8524b9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8c12da49-ebd3-4352-9758-26e3c3529999",
        "title": "SpotifyWrapper",
        "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/index.spec.js",
        "file": "/tests/index.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should create an instance of SpotifyWrapper",
            "fullTitle": "SpotifyWrapper should create an instance of SpotifyWrapper",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spotify = new _index2.default({});\n(0, _chai.expect)(spotify).to.be.an.instanceof(_index2.default);",
            "err": {},
            "isRoot": false,
            "uuid": "93eeae21-fe60-41d2-9f91-1cc6eb7211cb",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should receive apiURL as an option",
            "fullTitle": "SpotifyWrapper should receive apiURL as an option",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spotify = new _index2.default({\n  apiURL: 'blabla'\n});\n(0, _chai.expect)(spotify.apiURL).to.be.equal('blabla');",
            "err": {},
            "isRoot": false,
            "uuid": "8b439641-1f9b-450e-a436-731d7b8d7187",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should use the default apiURL if not provided",
            "fullTitle": "SpotifyWrapper should use the default apiURL if not provided",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spotify = new _index2.default({});\n(0, _chai.expect)(spotify.apiURL).to.be.equal('https://api.spotify.com/v1');",
            "err": {},
            "isRoot": false,
            "uuid": "30270cbd-b485-4e02-840a-e34cb7d7a253",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should receive token as an option",
            "fullTitle": "SpotifyWrapper should receive token as an option",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spotify = new _index2.default({\n  token: 'foo'\n});\n(0, _chai.expect)(spotify.token).to.be.equal('foo');",
            "err": {},
            "isRoot": false,
            "uuid": "386800a4-5a41-41ca-8a81-9724f2f3a7e5",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "93eeae21-fe60-41d2-9f91-1cc6eb7211cb",
          "8b439641-1f9b-450e-a436-731d7b8d7187",
          "30270cbd-b485-4e02-840a-e34cb7d7a253",
          "386800a4-5a41-41ca-8a81-9724f2f3a7e5"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "db20cb64-68d6-49de-8e8b-f28e58500c56",
        "title": "Search",
        "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/search.spec.js",
        "file": "/tests/search.spec.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Search \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "names = ['Deftones', 'Queen'];\nspotify = new _index2.default({\n  token: 'foo'\n});\nfetchedStub = _sinon2.default.stub(global, 'fetch');\nfetchedStub.resolves({ json: function json() {} });",
            "err": {},
            "isRoot": false,
            "uuid": "9b61ea18-483b-46ba-8943-a132f53eefd9",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "Search \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "fetchedStub.restore();",
            "err": {},
            "isRoot": false,
            "uuid": "42e51e46-fe9b-4597-80d4-bb69d9262160",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "b17d0282-931a-4205-babd-7c5b5e0edc78",
            "title": "smoke tests",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/search.spec.js",
            "file": "/tests/search.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should exist the spotify.search.albums method",
                "fullTitle": "Search smoke tests should exist the spotify.search.albums method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return (0, _chai.expect)(spotify.search.albums).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "cf04b9ae-5a40-4b98-842b-1b69e6cb538f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should exist the spotify.search.artists method",
                "fullTitle": "Search smoke tests should exist the spotify.search.artists method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return (0, _chai.expect)(spotify.search.artists).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "8e81eb69-2120-4d61-9673-1352cbc8dd6e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should exist the spotify.search.playlists method",
                "fullTitle": "Search smoke tests should exist the spotify.search.playlists method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return (0, _chai.expect)(spotify.search.playlists).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "b2701e02-45c9-4bee-a9ea-8386b3bef056",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should exist the spotify.search.tracks method",
                "fullTitle": "Search smoke tests should exist the spotify.search.tracks method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "return (0, _chai.expect)(spotify.search.tracks).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "08700093-06a7-4e44-ae4b-85936f2603d5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cf04b9ae-5a40-4b98-842b-1b69e6cb538f",
              "8e81eb69-2120-4d61-9673-1352cbc8dd6e",
              "b2701e02-45c9-4bee-a9ea-8386b3bef056",
              "08700093-06a7-4e44-ae4b-85936f2603d5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "54f4a446-7bb9-47d8-8acc-cada6cae0da1",
            "title": "Testing spotify.search.albums",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/search.spec.js",
            "file": "/tests/search.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should call fetch function",
                "fullTitle": "Search Testing spotify.search.albums should call fetch function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "spotify.search.albums();\nreturn (0, _chai.expect)(fetchedStub).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "54b372bc-4dca-483d-a357-d820754d1905",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call fetch with the correct URL",
                "fullTitle": "Search Testing spotify.search.albums should call fetch with the correct URL",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var albumURL = void 0;\nnames.forEach(function (name) {\n  albumURL = _config2.default + '/search?q=' + name + '&type=album';\n  spotify.search.albums(name);\n  (0, _chai.expect)(fetchedStub).to.have.been.calledWith(albumURL);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "979eb2de-b259-4f36-ad39-9efdedbfc429",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "54b372bc-4dca-483d-a357-d820754d1905",
              "979eb2de-b259-4f36-ad39-9efdedbfc429"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "733c768e-1ff5-4da0-8ca8-91f1d8a0c11d",
            "title": "Testing spotify.search.artists",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/search.spec.js",
            "file": "/tests/search.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should call fetch function",
                "fullTitle": "Search Testing spotify.search.artists should call fetch function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "spotify.search.artists();\nreturn (0, _chai.expect)(fetchedStub).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "8bbe35bd-3f52-4fd8-8e2b-6d788f483aa9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call fetch with the correct URL",
                "fullTitle": "Search Testing spotify.search.artists should call fetch with the correct URL",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var artistURL = void 0;\nnames.forEach(function (name) {\n  artistURL = _config2.default + '/search?q=' + name + '&type=artist';\n  spotify.search.artists(name);\n  (0, _chai.expect)(fetchedStub).to.have.been.calledWith(artistURL);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1ac48ca9-4570-4f5b-928a-95ced1d56799",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8bbe35bd-3f52-4fd8-8e2b-6d788f483aa9",
              "1ac48ca9-4570-4f5b-928a-95ced1d56799"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "42e6258c-f0fe-4609-8957-0f570bb64c53",
            "title": "Testing spotify.search.playlists",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/search.spec.js",
            "file": "/tests/search.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should call fetch function",
                "fullTitle": "Search Testing spotify.search.playlists should call fetch function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "spotify.search.playlists();\nreturn (0, _chai.expect)(fetchedStub).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "cd13a16e-c57e-4d57-84dc-771ef3882560",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call fetch with the correct URL",
                "fullTitle": "Search Testing spotify.search.playlists should call fetch with the correct URL",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var playlistURL = void 0;\nnames.forEach(function (name) {\n  playlistURL = _config2.default + '/search?q=' + name + '&type=playlist';\n  spotify.search.playlists(name);\n  (0, _chai.expect)(fetchedStub).to.have.been.calledWith(playlistURL);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9c2817ef-5b9c-45a8-b2c4-1f6efe8b936e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cd13a16e-c57e-4d57-84dc-771ef3882560",
              "9c2817ef-5b9c-45a8-b2c4-1f6efe8b936e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "69c46014-efaa-4b35-a24a-be03977ad043",
            "title": "Testing spotify.search.tracks",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/search.spec.js",
            "file": "/tests/search.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should call fetch function",
                "fullTitle": "Search Testing spotify.search.tracks should call fetch function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "spotify.search.tracks();\nreturn (0, _chai.expect)(fetchedStub).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "67e748dd-1286-48ff-ac5a-aab871204067",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call fetch with the correct URL",
                "fullTitle": "Search Testing spotify.search.tracks should call fetch with the correct URL",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var trackURL = void 0;\nnames.forEach(function (name) {\n  trackURL = _config2.default + '/search?q=' + name + '&type=track';\n  spotify.search.tracks(name);\n  (0, _chai.expect)(fetchedStub).to.have.been.calledWith(trackURL);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e8552235-314e-4688-bfcb-9ba10ca083f7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "67e748dd-1286-48ff-ac5a-aab871204067",
              "e8552235-314e-4688-bfcb-9ba10ca083f7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}