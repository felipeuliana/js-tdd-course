{
  "stats": {
    "suites": 6,
    "tests": 16,
    "passes": 16,
    "pending": 0,
    "failures": 0,
    "start": "2019-02-28T16:44:15.554Z",
    "end": "2019-02-28T16:44:15.563Z",
    "duration": 9,
    "testsRegistered": 16,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "699a4853-e5be-4ca6-9587-97f63e31ceb7",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "8664b17c-6265-492c-94bb-2f5a1800fa9c",
        "title": "Album",
        "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/album.spec.js",
        "file": "/tests/album.spec.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "Album \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "ids = ['28sCbClwbAhHN6ovutizQg', '42QVkdlfEk9uaG0NboeKpq'];\nspotify = new _index2.default({\n  token: 'foo'\n});\nstubedFetch = _sinon2.default.stub(global, 'fetch');\npromise = stubedFetch.resolves({ json: function json() {\n    return { album: 'name' };\n  } });",
            "err": {},
            "isRoot": false,
            "uuid": "7bf818d9-dda9-409e-adb7-93953823803f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "Album \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "stubedFetch.restore();",
            "err": {},
            "isRoot": false,
            "uuid": "530f1e3f-0a12-42af-b830-8054c8859447",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "0152067e-fd44-45d4-a9af-5ab314df32af",
            "title": "Smoke tests",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/album.spec.js",
            "file": "/tests/album.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should have getAlbum method",
                "fullTitle": "Album Smoke tests should have getAlbum method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(0, _chai.expect)(spotify.album.getAlbum).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "7ffa65d0-5f3b-4ece-9da0-253a8dfff7b8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have getAlbums method",
                "fullTitle": "Album Smoke tests should have getAlbums method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(0, _chai.expect)(spotify.album.getAlbums).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "2f0b69e8-92cd-49fd-9c4b-fa98654634e2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have getTracks method",
                "fullTitle": "Album Smoke tests should have getTracks method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(0, _chai.expect)(spotify.album.getTracks).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "9074ed67-8ada-4900-a9aa-c954042e8f17",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7ffa65d0-5f3b-4ece-9da0-253a8dfff7b8",
              "2f0b69e8-92cd-49fd-9c4b-fa98654634e2",
              "9074ed67-8ada-4900-a9aa-c954042e8f17"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "ef4c65af-9daf-440f-b43b-a99611cce3a9",
            "title": "Testing getAlbum method",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/album.spec.js",
            "file": "/tests/album.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should call fetch method",
                "fullTitle": "Album Testing getAlbum method should call fetch method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "spotify.album.getAlbum();\n(0, _chai.expect)(stubedFetch).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "862ebccd-0166-4b98-9599-cd3edd7e7bc4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call fetch with the correct URL",
                "fullTitle": "Album Testing getAlbum method should call fetch with the correct URL",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var albumURL = _config2.default + '/album/';\nids.forEach(function (id) {\n  spotify.album.getAlbum(id);\n  (0, _chai.expect)(stubedFetch).to.have.been.calledWith('' + albumURL + id);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d0716a90-5a6f-4c3c-a595-cf1cfc96e5bb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the correct data from Promise",
                "fullTitle": "Album Testing getAlbum method should return the correct data from Promise",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "ids.forEach(function (id) {\n  var album = spotify.album.getAlbum(id);\n  album.then(function (data) {\n    (0, _chai.expect)(data).to.be.eql({ album: 'name' });\n  });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "cfe4346d-05fb-4b5e-a792-9cada69080ca",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "862ebccd-0166-4b98-9599-cd3edd7e7bc4",
              "d0716a90-5a6f-4c3c-a595-cf1cfc96e5bb",
              "cfe4346d-05fb-4b5e-a792-9cada69080ca"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "cbac0aac-2689-4416-ac9c-945d65926da6",
            "title": "Testing getAlbums method",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/album.spec.js",
            "file": "/tests/album.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should call fetch method",
                "fullTitle": "Album Testing getAlbums method should call fetch method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var albums = spotify.album.getAlbums();\n(0, _chai.expect)(stubedFetch).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "d71c860c-1844-45cf-9979-f47138441cd1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call fetch with the correct URL's",
                "fullTitle": "Album Testing getAlbums method should call fetch with the correct URL's",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var albumsURL = _config2.default + '/albums/?ids=';\nvar albums = spotify.album.getAlbums(ids);\n(0, _chai.expect)(stubedFetch).to.have.been.calledWith('' + albumsURL + ids);",
                "err": {},
                "isRoot": false,
                "uuid": "47bfcd00-55be-4072-9f7f-b42859a561cb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the correct data from Promise",
                "fullTitle": "Album Testing getAlbums method should return the correct data from Promise",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var albums = spotify.album.getAlbums(ids);\nalbums.then(function (data) {\n  (0, _chai.expect)(data).to.be.eql({ album: 'name' });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4f5053c1-6c7d-4713-9b1e-55784c2e5ad0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d71c860c-1844-45cf-9979-f47138441cd1",
              "47bfcd00-55be-4072-9f7f-b42859a561cb",
              "4f5053c1-6c7d-4713-9b1e-55784c2e5ad0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "913c9da2-c344-47c4-81e7-4fbafedb11da",
            "title": "Testing getTracks method",
            "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/album.spec.js",
            "file": "/tests/album.spec.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should call fetch method",
                "fullTitle": "Album Testing getTracks method should call fetch method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var tracks = spotify.album.getTracks();\n(0, _chai.expect)(stubedFetch).to.have.been.calledOnce;",
                "err": {},
                "isRoot": false,
                "uuid": "41852c66-7640-4c48-b7e6-391dff6ced74",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should call fetch with the correct URL",
                "fullTitle": "Album Testing getTracks method should call fetch with the correct URL",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var tracksURL = _config2.default + '/tracks/';\nids.forEach(function (id) {\n  var tracks = spotify.album.getTracks(id);\n  (0, _chai.expect)(stubedFetch).to.have.been.calledWith('' + tracksURL + id);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d155c84f-80c6-46ee-9970-15ce716113cf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return the correct data from Promise",
                "fullTitle": "Album Testing getTracks method should return the correct data from Promise",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "ids.forEach(function (id) {\n  var tracks = spotify.album.getTracks(id);\n  tracks.then(function (data) {\n    (0, _chai.expect)(data).to.be.eql({ album: 'name' });\n  });\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ddc89c01-21e0-4e70-864d-15bdb63b0466",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "41852c66-7640-4c48-b7e6-391dff6ced74",
              "d155c84f-80c6-46ee-9970-15ce716113cf",
              "ddc89c01-21e0-4e70-864d-15bdb63b0466"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7fc1bcb2-31e3-4794-a297-ef2c9ea092e2",
        "title": "SpotifyWrapper",
        "fullFile": "/home/mtzcpd830/projetos/ext/js-tdd-course/tests/index.spec.js",
        "file": "/tests/index.spec.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should create an instance of SpotifyWrapper",
            "fullTitle": "SpotifyWrapper should create an instance of SpotifyWrapper",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spotify = new _index2.default({});\n(0, _chai.expect)(spotify).to.be.an.instanceof(_index2.default);",
            "err": {},
            "isRoot": false,
            "uuid": "0cb5e496-6004-44da-bfb8-b32f5dd22d5a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should receive apiURL as an option",
            "fullTitle": "SpotifyWrapper should receive apiURL as an option",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spotify = new _index2.default({\n  apiURL: 'blabla'\n});\n(0, _chai.expect)(spotify.apiURL).to.be.equal('blabla');",
            "err": {},
            "isRoot": false,
            "uuid": "0542a226-242d-439c-b6d9-f50e125f95e3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should use the default apiURL if not provided",
            "fullTitle": "SpotifyWrapper should use the default apiURL if not provided",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spotify = new _index2.default({});\n(0, _chai.expect)(spotify.apiURL).to.be.equal('https://api.spotify.com/v1');",
            "err": {},
            "isRoot": false,
            "uuid": "9d93ac23-9e5a-494c-8dd2-e59cef597f15",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should receive token as an option",
            "fullTitle": "SpotifyWrapper should receive token as an option",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var spotify = new _index2.default({\n  token: 'foo'\n});\n(0, _chai.expect)(spotify.token).to.be.equal('foo');",
            "err": {},
            "isRoot": false,
            "uuid": "ae924ed7-aa42-48b5-92f1-0049ade8d122",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "0cb5e496-6004-44da-bfb8-b32f5dd22d5a",
          "0542a226-242d-439c-b6d9-f50e125f95e3",
          "9d93ac23-9e5a-494c-8dd2-e59cef597f15",
          "ae924ed7-aa42-48b5-92f1-0049ade8d122"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}